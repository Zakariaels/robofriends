{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAeeA,EAbF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAErB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,6BACI,gCAAMJ,EAAN,KACA,+BAAKC,EAAL,QCKDI,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACI,6BACQA,EAAOC,KAAK,SAAAC,GACZ,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKT,GAAIA,GAAIS,EAAKT,GAAIC,KAAMQ,EAAKR,KAAMC,MAAOO,EAAKP,aCQtES,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKT,UAAU,OACX,2BACAA,UAAU,uCACVU,KAAK,SACLC,YAAY,cACZC,SAAUH,MCMPI,G,MAbA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SACZC,OAAQ,kBACRC,OAAQ,UAEfJ,EAAMK,YCeJC,E,YApBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACJ,uDAEAG,KAAKX,MAAMK,a,GAjBFQ,aCiDbC,E,YA3Cb,aAAe,IAAD,8BACZ,+CAOFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAPzC,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAa,IAJH,E,iFAYO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BAGhC,IAAD,EACuBb,KAAKJ,MAA5BjB,EADA,EACAA,OAAQ2B,EADR,EACQA,YACTQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACnC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASZ,EAAYW,kBAGvD,OAAQtC,EAAOwC,OAKT,yBAAK5C,UAAU,MACZ,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWS,aAAgBgB,KAAKI,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUzB,OAAUmC,OAThC,yBAAKvC,UAAU,MACZ,+C,GA3BS6C,IAAMlB,WCKJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.b4ebd2b4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    // const {id, name, email} = props;\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\">\n            <img src={`https://robohash.org/${id}?size=300x300`} alt=\"robots\"/>\n            <div>\n                <h2> {name} </h2>\n                <p> {email} </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n              { robots.map( user => {\n                return <Card key={user.id} id={user.id} name={user.name} email={user.email}/>\n                                    })\n              }\n        </div >\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input \n            className=\"pa3 ba bâ€”green bg-lightest-blue\" \n            type='search' \n            placeholder='searchrobot' \n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', \n                    border: '5px solid black', \n                    height: '800px'}}>\n\n            {props.children}\n            \n        </div>\n    )\n\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops. that is not good</h1>\n        } \n            return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: \"\"\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield: event.target.value});\n  } \n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => {return response.json();})\n      .then(users => this.setState({robots: users}));\n  }\n\n  render() {\n    const {robots, searchfield} = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n     });\n\n    return !robots.length ? \n      <div className=\"tc\">\n         <h1>Loading...</h1>\n      </div> :\n        (\n          <div className=\"tc\">\n             <h1 className=\"f1\">Robofriends</h1>\n             <SearchBox searchChange = {this.onSearchChange}/>\n             <Scroll>\n               <ErrorBoundary> \n                  <CardList robots = {filteredRobots}/> \n               </ErrorBoundary>\n                \n             </Scroll>\n          </div>\n        );\n       }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}